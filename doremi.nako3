/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
　ドレミプレーヤー(doremi.nako3)　v0.28.5

　Web Audio APIを使ってMMLやドレミのテキストを演奏したりするプラグイン。
　歌詞をカラオケ表示させることができます☆
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
＃変数
＃＃演奏データ作成用
MML変換設定辞書とは変数。
変数 ドレミ演奏データ＝空辞書。
＃＃波形・鍵盤描画用
ドレミアナライザーとは変数。
変数 ドレミ描画オプション設定辞書＝空辞書。
ドレミ描画オプション設定辞書初期化。

#------------------------------------------------
＃ ドレミ演奏命令
#------------------------------------------------
●(ドレミを|ドレミの)ドレミ演奏
    オーディオコンテキスト＝オーディオコンテキスト作成。
    もし、(ドレミの変数型確認)＝「string」ならば、ドレミ＝ドレミからドレミ演奏データ作成。
    オーディオコンテキストでドレミをドレミデータ演奏。
    オーディオコンテキストを戻す。
ここまで。

# Aはオーディオコンテキストを指定する
●(Aを|Aの)ドレミ演奏停止
    もし、(A≠NULL)ならば、:
        もし、(A["state"]≠「closed」)ならば、:
            Aの「close」を[]でJSメソッド実行。
ここまで。

●(Aを|Aの)ドレミ演奏一時停止
    もし、A≠NULLならば、Aの「suspend」を[]でJSメソッド実行。
ここまで。

●(Aを|Aの)ドレミ演奏再開
    もし、A≠NULLならば、Aの「resume」を[]でJSメソッド実行。
ここまで。
#------------------------------------------------
＃＃波形描画
●(xywhへ色で|xywhに色の)時間領域波形描画
    もし、色＝空ならば、色＝[水色,黒色]。
    x,y,w,h＝xywh。線色,背景色,線太＝色。
    もし、背景色＝NULLならば、背景色＝黒色。
    もし、線太＝NULLならば、線太＝2。
    ドレミ描画オプション設定辞書["波形"]["時間領域"]＝{
        "X":x, "Y":y, "W":w, "H":h, "線色":線色, "線太":線太, "背景色":背景色
    }
    空に線色設定。背景色に塗り色設定。
    [x,y,w,h]へ四角描画。
    線色に線色設定。線太に線太設定。
    [x,y+h/2]から[x+w,y+h/2]へ線描画。
ここまで。

●(xywhへ色で|xywhに色の)周波数領域波形描画
    もし、色＝空ならば、色＝[緑色,黒色]。
     x,y,w,h＝xywh。線色,背景色,線太＝色。
    もし、背景色＝NULLならば、背景色＝黒色。
    もし、線太＝NULLならば、線太＝2。
    ドレミ描画オプション設定辞書["波形"]["周波数領域"]＝{
        "X":x, "Y":y, "W":w, "H":h, "線色":線色, "線太":線太, "背景色":背景色
    }
    空に線色設定。背景色に塗り色設定。
    [x,y,w,h]へ四角描画。
    線色に線色設定。1に線太設定。
    [x,y+h]から[x+w,y+h]へ線描画。
ここまで。
#------------------------------------------------
＃＃鍵盤描画
※xywhは最初の白鍵を描画する位置と白鍵一個分のサイズ。
●(xywhへ押下中番号配列でノート番号から鍵数の)鍵盤描画
    設定＝ドレミ描画オプション設定辞書["鍵盤"]。
    設定["連携"]＝オン。設定["xywh"]＝xywh。設定["ノート番号"]＝ノート番号。設定["鍵数"]＝鍵数。
    もし、押下中番号配列＝空ならば、押下中番号配列＝空配列。
    もし、(ノート番号の変数型確認)≠「number」ならば、:
        音名リスト＝「ド,レ,ミ,ファ,ソ,ラ,シ,ど,れ,み,ふぁ,そ,ら,し,C,D,E,F,G,A,B,c,d,e,f,g,a,b,Ｃ,Ｄ,Ｅ,Ｆ,Ｇ,Ａ,Ｂ,ｃ,ｄ,ｅ,ｆ,ｇ,ａ,ｂ」を「,」で区切る。
        ノート番号を「/([ドレミフソラシどれみふそらしＡ-Ｇａ-ｇA-Ga-g][ァぁ]?)([０-８\d])/」で正規表現マッチ。
        ノート番号リスト＝[0,2,4,5,7,9,11]。
        ノート番号＝ノート番号リスト[(音名リストから抽出文字列[0]を配列検索)%7]。
        ノート番号＝ノート番号＋12＋(抽出文字列[1]を半角変換)*12。
    x,y,w,h＝xywh。
    白鍵幅＝w。黒鍵幅＝白鍵幅*設定["黒鍵"]["サイズ"][0]。
    白鍵x＝x+1。
    数をノート番号から(ノート番号+鍵数-1)まで繰り返す:
        [0,2,4,5,7,9,11]を反復:
            もし、数%12＝対象ならば、:
                設定["白鍵"]["線色"]に線色設定。
                設定["白鍵"]["塗色"]に塗り色設定。
                もし、(押下中番号配列から数を配列検索)≠-1ならば、設定["白鍵"]["押下時塗色"]に塗り色設定。
                [白鍵x,y+1,白鍵幅,h-2]へ四角描画。
                白鍵xを白鍵幅だけ増やす。
    黒鍵x＝x+白鍵幅-黒鍵幅/2+1。
    数をノート番号から(ノート番号+鍵数-1)まで繰り返す:
        [1,3,6,8,10]を反復:
            もし、数%12＝対象ならば、:
                設定["黒鍵"]["線色"]に線色設定。
                設定["黒鍵"]["塗色"]に塗り色設定。
                もし、(押下中番号配列から数を配列検索)≠-1ならば、設定["黒鍵"]["押下時塗色"]に塗り色設定。
                [黒鍵x,y+1,黒鍵幅,h*設定["黒鍵"]["サイズ"][1]]へ四角描画。
                黒鍵xを白鍵幅だけ増やす。
        もし、(数%12＝5)または(数%12＝11)ならば、黒鍵xを白鍵幅だけ増やす。
ここまで。
#------------------------------------------------
＃＃ドレミ演奏の内容
# まずオーディオコンテキストを作る
●オーディオコンテキスト作成
    「new AudioContext()||webkitAudioContext()」をJS実行。
ここまで。

# ドレミのテキストやMMLから演奏データを作成する
●(ドレミから|ドレミの)ドレミ演奏データ作成
    MML変換設定辞書初期化。
    ドレミ演奏データ＝空辞書。
    ドレミ演奏データ["情報"]＝空辞書。
    ドレミ演奏データ["データ"]＝空配列。
    ドレミ＝ドレミをストトンMML変換処理。
    ドレミをMML演奏データ変換処理。
    もし、(ドレミ演奏データ["情報"]["字幕設定"]≠NULL)かつ(ドレミ演奏データ["情報"]["歌詞"]≠NULL)ならば、ドレミ字幕データ作成。
    ドレミ演奏データを戻す。
ここまで。

# 演奏データを再生する
# Aはオーディオコンテキスト
●(Aでドレミデータを|ドレミデータの)ドレミデータ演奏
    もし、ドレミ描画オプション設定辞書["鍵盤"]["連携"]＝オンならば、:
        ドレミ描画オプション設定辞書["鍵盤"]["演奏データ"]＝ドレミデータ["データ"]を配列複製。
    波形描画＝ドレミ描画オプション設定辞書["波形"]。
    もし、(波形描画["時間領域"]≠NULL)または(波形描画["周波数領域"]≠NULL)ならば、:
        ドレミアナライザー＝Aの「createAnalyser」を[]でJSメソッド実行。
        ドレミアナライザー["fftSize"]＝波形描画["データサイズ"]。
        もし、波形描画["時間領域"]≠NULLならば、「時間領域波形描画タイマー」を0.01秒毎。
        もし、波形描画["周波数領域"]≠NULLならば、「周波数領域波形描画タイマー」を0.01秒毎。
    ドレミデータのドレミ情報描画。
    ドレミデータ["データ"]を反復:
      もし、対象["音量"]＞0ならば、:
        オシレータ＝Aで対象の音色準備処理。
    Aとドレミデータのドレミ演奏タイマー。
ここまで。
#------------------------------------------------
＃＃オーディオコンテキスト
●(Aの)オーディオコンテキスト状態
    もし、A=NULLならば、NULLを戻す。
    A["state"]を戻す。
ここまで。

●(Aの)ドレミ演奏現在時刻
    もし、A=NULLならば、NULLを戻す。
    A["currentTime"]を戻す。
ここまで。

＃＃演奏データ
●(ファイル名で演奏データを)ドレミ演奏データダウンロード
    もし、ファイル名＝空ならば、ファイル名＝「doremi_nako3.json」
    演奏データ＝演奏データをJSONエンコード。
    BLOB＝演奏データを{"type":"application/json"}でBLOB作成。
    URL＝「URL.createObjectURL」を[BLOB]でJS関数実行。
    A＝「a」のDOM部品作成。# 仮のaタグ。
    Aの「download」にファイル名をDOM属性設定。
    Aの「href」にURLをDOM属性設定。
    Aの「click」を空でJSメソッド実行。
    DOM親要素からAをDOM子要素削除。# 消して終了。
    「window.URL.revokeObjectURL」を[URL]でJS関数実行。# 解放して終了。
ここまで。
#------------------------------------------------

#------------------------------------------------
＃ドレミデータ演奏の下請け
＃＃タイマー
●(Aとドレミデータの)ドレミ演奏タイマー
    Cとは変数。字幕データとは変数。
    もし、(ドレミデータ["情報"]["字幕設定"]≠NULL)かつ(ドレミデータ["字幕データ"]≠NULL)ならば、:
        C＝ドレミデータ["情報"]["字幕設定"]["カウンタ"]。
        字幕データ＝ドレミデータ["字幕データ"][C]。
    もし、A＝NULLならば、:
        もし、字幕データ≠NULLならば、ドレミデータ["情報"]["字幕設定"]["カウンタ"]＝0。
        戻る。
    違えば、もし、((Aのオーディオコンテキスト状態)＝「closed」)ならば、:
        もし、字幕データ≠NULLならば、ドレミデータ["情報"]["字幕設定"]["カウンタ"]＝0。
        戻る。
    違えば、もし、A["currentTime"]＞(ドレミデータ["情報"]["曲長"]＋2)ならば、:
        Aをドレミ演奏停止。
        ドレミ描画オプション設定辞書["波形"]["時間領域"]["タイマー"]のタイマー停止。
        ドレミ描画オプション設定辞書["波形"]["周波数領域"]["タイマー"]のタイマー停止。
        戻る。
    違えば、もし、字幕データ≠NULLならば、:
        もし、A["currentTime"]＞字幕データ["時間"]ならば、:
            ドレミデータのCをドレミ字幕描画。
            ドレミデータ["情報"]["字幕設定"]["カウンタ"]を１増やす。

    # 鍵盤描画
    鍵盤設定＝ドレミ描画オプション設定辞書["鍵盤"]。
    もし、(鍵盤設定["連携"]＝オン)かつ(A["currentTime"]＜ドレミデータ["情報"]["曲長"]+2)ならば、
        演奏中ノード＝空配列。
        鍵盤設定["演奏データ"]を反復:
            もし、(対象["開始時間"]≦A["currentTime"])かつ(対象["停止時間"]≧A["currentTime"])ならば、演奏中ノードに対象["音番号"]を配列追加。
        鍵盤設定["xywh"]へ演奏中ノードで鍵盤設定["ノート番号"]から鍵盤設定["鍵数"]の鍵盤描画。
    ここまで。
    0.01秒待つ。
    Aとドレミデータのドレミ演奏タイマー。
ここまで。

# 波形描画
●時間領域波形描画タイマー(ID)
        設定＝ドレミ描画オプション設定辞書["波形"]["時間領域"]。
        設定["タイマー"]＝ID。
        時間領域＝「new Uint8Array({ドレミアナライザー["fftSize"]})」をJS実行。
        ドレミアナライザーの「getByteTimeDomainData」を[時間領域]でJSメソッド実行。
        描画x＝設定["X"]。描画y＝設定["Y"]。描画幅＝設定["W"]。描画高＝設定["H"]。
        空に線色設定。設定["背景色"]に塗り色設定。
        [描画x,描画y,描画幅,描画高さ]へ四角描画。
        設定["線色"]に線色設定。設定["線太"]に線太さ設定。描画中コンテキスト["lineCap"]=「round」
        拡大率＝2.5。描画高さ＝描画高さ*拡大率。描画y＝描画y-(描画高さ-描画高さ/拡大率)/2。
        元x＝描画x。元y＝描画y+描画高さ/2。
        時間領域を反復:
            x＝(対象キー/(時間領域の要素数))*描画幅＋描画x。
            y＝(1-(時間領域[対象キー]/255))*描画高さ＋描画y。
            もし、対象キー≠0ならば、:
                [元x,元y]から[x,y]へ線描画。
                元x＝x。元y＝y。
ここまで。
●周波数領域波形描画タイマー(ID)
        設定＝ドレミ描画オプション設定辞書["波形"]["周波数領域"]。
        設定["タイマー"]＝ID。
        周波数領域＝「new Uint8Array({ドレミアナライザー["fftSize"]}/2)」をJS実行。
        ドレミアナライザーの「getByteFrequencyData」を[周波数領域]でJSメソッド実行。
        描画x＝設定["X"]。描画y＝設定["Y"]。描画幅＝設定["W"]。描画高＝設定["H"]。
        空に線色設定。設定["背景色"]に塗り色設定。
        [描画x,描画y,描画幅,描画高さ]へ四角描画。
        設定["線色"]に線色設定。設定["線太"]に線太さ設定。描画中コンテキスト["lineCap"]=「butt」
        周波数領域を反復:
            x＝(対象キー/(周波数領域の要素数))*描画幅＋描画x。
            y＝(1-(周波数領域[対象キー]/255))*描画高さ＋描画y。
            もし、対象キー≠0ならば、[x,y]から[x,描画y+描画高]へ線描画。
ここまで。

＃＃字幕描画
●(ドレミデータのNoを)ドレミ字幕描画
    変数 字幕設定＝ドレミデータ["情報"]["字幕設定"]。
    変数 字幕データ＝ドレミデータ["字幕データ"][No]
    変数 x＝字幕設定["描画X"]。変数 y＝字幕設定["描画Y"]。
    変数 文字＝字幕データ["文字"]。変数 改行数＝字幕データ["改行"]。
    字幕設定["歌詞"]["カラオケ文字色"]に塗り色設定。
    字幕設定["歌詞"]["文字サイズ"]に描画フォント設定。
    変数 文字幅＝文字の文字幅取得。
    変数 文字高さ＝「あ」の文字高さ取得。
    文字高さ＝文字高さ+文字高さ/4。
    [x,y]へ文字を文字描画。
    字幕設定["描画X"]＝x+文字幅。
    もし、改行数＞０ならば、:
        字幕設定["描画X"]＝字幕設定["歌詞"]["X"]。
        字幕設定["描画Y"]＝y+文字高さ*改行数。
ここまで。

●(ドレミデータの)ドレミ情報描画
    変数 ドレミ情報＝ドレミデータ["情報"]
    変数 字幕設定＝ドレミ情報["字幕設定"]。
    もし、字幕設定＝NULLならば、戻る。
    「曲名,作者」を「,」で区切って反復:
        もし、ドレミ情報[対象]＝NULLならば、続ける。
        変数 x＝字幕設定[対象]["X"]。変数 y＝字幕設定[対象]["Y"]。
        字幕設定[対象]["文字色"]に塗り色設定。
        字幕設定[対象]["文字サイズ"]に描画フォント設定。
        [x,y]へドレミ情報[対象]を文字描画。
    「コメント,歌詞」を「,」で区切って反復:
        もし、ドレミ情報[対象]＝NULLならば、続ける。
        x＝字幕設定[対象]["X"]。y＝字幕設定[対象]["Y"]。
        字幕設定[対象]["文字色"]に塗り色設定。
        字幕設定[対象]["文字サイズ"]に描画フォント設定。
        変数 文字高さ＝「あ」の文字高さ取得。
        文字高さ＝文字高さ+文字高さ/4。
        ドレミ情報[対象]を改行で区切って反復:
            [x,y]へ対象を文字描画。
            y＝y+文字高さ。
ここまで。

＃＃＃文字描画幅取得
●(Aの)文字幅取得
　　TM＝Aの文字描画幅取得。
　　TM["width"]で戻る。
ここまで。
●(Aの)文字高さ取得
　　TM＝Aの文字描画幅取得。
　　TM["actualBoundingBoxAscent"]+TM["actualBoundingBoxDescent"]で戻る。
ここまで。

＃＃ウェブオーディオAPI
●(オーディオコンテキストでデータの)音色準備処理とは
	オシレータ＝オーディオコンテキストの「createOscillator」を[]でJSメソッド実行。
	ゲイン＝オーディオコンテキストの「createGain」を[]でJSメソッド実行。
    # 音量設定
    音量＝データ["音量"]。
    開始時間＝データ["開始時間"]。
    停止時間＝データ["停止時間"]。
    ゲイン["gain"]の「setValueAtTime」を[0,開始時間]でJSメソッド実行。
    ゲイン["gain"]の「linearRampToValueAtTime」を[音量,開始時間+0.003]でJSメソッド実行。

    # 音色設定
    音色＝データ["音色"]。音番号＝データ["音番号"]。
    音色データ＝音色設定データ。
    波形タイプ,減衰パターン,余韻,発声時間,デチューン＝音色データ[音色]。
    ## 波形
    もし、(音色＜１)または(音色＞(音色データの要素数))ならば、音色＝0。
    波形タイプで条件分岐:
        0ならば、オシレータ["type"]＝「sine」。音量＝音量*1.3。。。
        1ならば、オシレータ["type"]＝「square」。音量＝音量*0.4。。。
        2ならば、オシレータ["type"]＝「sawtooth」。音量＝音量*0.5。。。
        3ならば、オシレータ["type"]＝「triangle」。音量＝音量*1.2。。。
        違えば、
            //音量＝音量*0.5。
            real＝空配列。imag＝空配列。real[0]＝0。imag[0]＝0。
            波形データ＝カスタム波形データ。
            波形データ[波形タイプ-4]を反復:
                real[対象キー+1]＝対象[0]。imag[対象キー+1]＝対象[1]。
            wave＝ オーディオコンテキストの「createPeriodicWave」を[real, imag]でJSメソッド実行。
            オシレータの「setPeriodicWave」を[wave]でJSメソッド実行。
        ここまで。
    ## 減衰・余韻
    もし、(余韻＝オフ)または(余韻＝NULL)ならば、余韻＝0.1。
    音長＝停止時間-開始時間。
    減衰パターンで条件分岐
      0ならば、//ピアノ系
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[音量*0.8,開始時間+(停止時間-開始時間)/2]でJSメソッド実行。
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[(音量*0.1)/音長,停止時間]でJSメソッド実行。
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[0.00001,停止時間+余韻]でJSメソッド実行。
      ここまで。
      1ならば、//クロマチック系、ベル、鐘
        もし、発声時間＝NULLならば、発声時間＝0。
        もし、発声時間＞音長ならば、発声時間＝音長。
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[0.00001,開始時間+発声時間+余韻]でJSメソッド実行。
      ここまで。
      2ならば、//減衰しない。オルガン系、ストリングス系、パイプ系など
        ゲイン["gain"]の「setValueAtTime」を[音量,停止時間]でJSメソッド実行。
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[0.00001,停止時間+余韻]でJSメソッド実行。
      ここまで。
      3ならば、//ギター系
        発声時間＝音量＊8。
        もし、発声時間＞音長-音長/8ならば、発声時間＝音長-音長/8。
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[音量*0.3,開始時間+発声時間]でJSメソッド実行。
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[音量*0.1,停止時間]でJSメソッド実行。
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[0.00001,停止時間+余韻]でJSメソッド実行。
      ここまで。
      4ならば、//笛系
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[音量*0.5,開始時間+(停止時間-開始時間)/2]でJSメソッド実行。
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[(音量*0.3)/音長,停止時間]でJSメソッド実行。
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[0.00001,停止時間+余韻]でJSメソッド実行。
      ここまで。
    ここまで。

    ## デチューン
    もし、デチューン≠NULLならば、
        オシレータ["detune"]の「setValueAtTime」を[デチューン,開始時間]でJSメソッド実行。
        オシレータ["detune"]の「linearRampToValueAtTime」を[0,停止時間]でJSメソッド実行。
    ここまで。

    # 方向
    ※ステレオパンを使うと、スマホなどで音割れする。
    変数 方向＝データ["方向"]。
    もし、方向≠NULLならば、
        ステレオパン＝オーディオコンテキストの「createStereoPanner」を[]でJSメソッド実行。
        もし、方向＝「回転」ならば、
            ステレオパン["pan"]の「setValueAtTime」を[-1,開始時間]でJSメソッド実行。
            ステレオパン["pan"]の「linearRampToValueAtTime」を[1,開始時間+(停止時間-開始時間)/2]でJSメソッド実行。
            ステレオパン["pan"]の「linearRampToValueAtTime」を[-1,停止時間]でJSメソッド実行。
        違えば、
            ステレオパン["pan"]の「setValueAtTime」を[方向,開始時間]でJSメソッド実行。
        ここまで。
    ここまで。

    # 接続
    オシレータの「connect」を[ゲイン]でJSメソッド実行。
    もし、ドレミアナライザー≠NULLならば、それの「connect」を[ドレミアナライザー]でJSメソッド実行。
    もし、方向≠NULLならば、それの「connect」を[ステレオパン]でJSメソッド実行。
    それの「connect」を[オーディオコンテキスト["destination"]]でJSメソッド実行。

    ※ビブラートもスマホなどで音割れする。
    もし、データ["ビブラート"]≠NULLならば、
        ビブラート＝オーディオコンテキストの「createOscillator」を[]でJSメソッド実行。
        ビブラート["frequency"]["value"]＝データ["ビブラート"]。
        ビブラートゲイン＝オーディオコンテキストの「createGain」を[]でJSメソッド実行。
        ビブラートゲイン["gain"]＝10。
        ビブラートの「connect」を[ビブラートゲイン]でJSメソッド実行。
        それの「connect」を[オシレータ["frequency"]]でJSメソッド実行。
        ビブラートの「start」を[開始時間]でJSメソッド実行。
        ビブラートの「stop」を[停止時間+余韻]でJSメソッド実行。
    ここまで。
    # 発声
    オシレータ["frequency"]["value"]＝音番号を周波数変換処理。
    オシレータの「start」を[開始時間]でJSメソッド実行。
    オシレータの「stop」を[停止時間+余韻]でJSメソッド実行。
ここまで。

＃＃音番号を周波数に変換する式
●(音番号を)周波数変換処理とは
    440*(2^((音番号-69)/12))で戻る。
ここまで。

＃＃音色データ
●カスタム波形データ
	[[[0,1],[0,0.8],[0,0.4],[0,0.2],[0,0.1]],[[0,1],[0,0],[0,0.5],[0,0],[0,0.2],[0,0.1],[0,0.2],[0,0.1],[0,0.1]],[[0,1],[0,0],[0,0.5],[0,0.5],[0,0.5],[0,0],[0,0.2],[0,0],[0,0.2],[0,0],[0,0.1]],[[0,1],[0,0.8],[0,0.4],[0,0.2],[0,0.1],[0,0],[0,0],[0,0.2],[0,0],[0,0.2]],[[0,1],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0.2],[0,0],[0,0.2]],[[0,1],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0.8],[0,0],[0,0],[0,0],[0,0],[0,4]],[[0,1],[0,0],[0,0.8],[0,0],[0,0],[0,0],[0,0],[0,0.8],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0.4]],[[0,1],[0,0],[0,0.8],[0,0],[0,0.4]],[[0,1],[0,0],[0,0],[0,0.8],[0,0],[0,0.4],[0,0],[0,0.2]],[[0,1],[0,0],[0,0.8],[0,0.8],[0,0],[0,0.7],[0,0.7],[0,0],[0,0.6],[0,0.6],[0,0],[0,0.5],[0,0.5],[0,0],[0,0.4],[0,0.4]],[[0,1],[0,0],[0,0.8],[0,0.5],[0,0.8],[0,0],[0,0.7],[0,0.4],[0,0.7],[0,0],[0,0.6],[0,0.3],[0,0.6],[0,0],[0,0.5],[0,0.2],[0,0.5],[0,0],[0,0.4],[0,0.1],[0,0.4],[0,0],[0,0.3],[0,0],[0,0.2],[0,0],[0,0.1]],[[0,1],[0,0.9],[0,0.8],[0,0.7],[0,0.6]],[[0,1],[0,0.9],[0,0],[0,0.8],[0,0],[0,0.7],[0,0],[0,0.6],[0,0],[0,0.5],[0,0],[0,0.4],[0,0],[0,0.3],[0,0],[0,0.2],[0,0],[0,0.1]],]を戻す。
ここまで。

●音色設定データ
	[[4,0,0.8],[4,0,0.8],[5,0,0.8],[6,0,0.8],[7,0,0.8,0,-24],[1,0,0.8],[7,0,0.8],[2,0,1],[13,0,0.5],[8,1,2,2],[9,1,2,2],[10,1,2,2],[11,1,2,2],[11,1,0.2,1],[12,1,0.2,0.5],[6,1,2,2],[2,1,1,1],[4,2,0.5,0,-12],[6,2,0.5,0,-12],[5,2,0.5,0,-12],[7,2,0.8,0,-12],[12,2,0.5,0,-12],[13,2,0.8,0,-12],[14,2,0.5,0,-12],[2,2,0.5,0,-12],[13,3,1],[7,3,1],[14,3,1],[2,3,1,0,24],[6,3,1],[13,3,1,0,24],[14,3,1,0,24],[9,3,1,0,24],[13,3,0.2],[5,3,0.2],[2,3,0.2],[14,3,0.2],[6,3,0.2],[7,3,0.2],[1,3,0.2,0,-24],[2,3,0.2,0,-24],[16,2,0.5],[13,2,0.5],[14,2,0.5],[15,2,0.5],[2,2,0.5],[14,1,0.2,0.2,-12],[12,1,2,2],[1,1,0.2,0.2],[16,2,1.5],[16,2,1.5,0,-12],[13,2,1.5],[13,2,1.5,0,-24],[14,2,1.5],[12,2,1.5,0,12],[2,2,1.5],[2,1,0.5,0.5,-24],[4,4,0.5,0,-12],[6,4,0.5,0,-12],[5,4,0.5,0,-12],[7,4,0.5,0,-12],[13,4,0.5,0,-12],[2,4,0.5,0,-12],[1,4,0.5,0,-12],[14,4,0.5,0,-12],[15,2,0.2],[13,2,0.2],[5,2,0.2],[6,2,0.2],[16,2,0.2],[14,2,0.2],[2,2,0.2],[4,2,0.2],[11,4,0.2],[5,4,0.2],[4,4,0.2],[3,4,0.2],[0,4,0.5,-60],[11,4,0.2,-60],[3,4,0.2,-60],[0,2,0.5],[1,2,0.2],[2,2,0.2],[6,4,0.2],[7,4,0.2],[2,4,0.2],[14,4,0.2],[16,4,0.2],[13,4,0.2],[12,1,4,2,-24],[16,1,4,2,-24],[14,1,4,2,-24],[10,1,4,2,-24],[8,1,4,2,-24],[7,1,4,2,-24],[2,1,4,2,-24],[13,1,4,2,-24],[1,1,4,2,-24],[13,4,4,0,-36],[11,1,4,2,-24],[14,1,2,1,-12],[16,1,2,1,-12],[0,1,2,1,-12],[3,1,2,1,-12],[2,1,2,1,-12],[13,1,2,2],[13,3,2],[14,1,1,1],[14,1,2,2],[7,1,0.5,0.5],[15,2,0.2],[16,2,0.2],[7,2,0.2],[9,1,2,2],[8,1,0.2,0.5],[16,1,0.2,0.5],[15,1,0.2,0.5],[7,1,0.2,0.5],[13,1,0.2,0.5],[14,1,0.2,0.5],[2,1,0.2,0.5],[0,2,1],[1,2,1],[2,2,1],[3,2,1],[0,1,2,2],[1,1,2,2],[2,1,2,2],[3,1,2,2]]を戻す。
ここまで。
#------------------------------------------------


#------------------------------------------------
＃ MMLを演奏データに変換
#------------------------------------------------
＃＃ストトン→MML
●(ドレミから|ドレミを)ストトンMML変換処理
    ドレミの「ここから演奏」を「?」に置換して、「?」で区切る。
    ドレミ＝それ[(それの配列要素数)-1]。
    変数 ストトン変換リスト＝{
      "全音符":"l1", "二分音符":"l2", "四分音符":"l4", "八分音符":"l8", "十六分音符":"l16", "付点四分音符":"l4.",
      "大きく":"C<", "小さく":"C>", "クレッシェンド":"C<", "デクレッシェンド":"C>", "Cresc":"C<", "Decresc":"C>",
      "ペダル":"S1", "放す":"S0",  "音量戻す":"C0",
      "ビブラートオフ":"W0", "ビブラート":"W",
      "トラック":"!", "TR":"!", "Track":"!", "NowTrack":"!", "TRACK":"!",
      "テンポ":"T", "Tempo":"T", "TEMPO":"T", "t":"T",
      "音色":"@", "音階":"o", "音符":"l", "音長":"l", "音量":"v", "ゲート":"q",
      "上":">", "↑":">", "‘":"`",
      "下":"<", "↓":"<", "”":'"',
      "ド":"c", "レ":"d", "ミ":"e", "フ":"f", "ァ":"",
      "ソ":"g", "ラ":"a", "シ":"b", "ン":"r", "ッ":"r",
      "ど":"c", "れ":"d", "み":"e", "ふ":"f", "ぁ":"",
      "そ":"g", "ら":"a", "し":"b", "ん":"r", "っ":"r",
      "ハ":"c","ニ":"d","ホ":"e","ヘ":"f","ト":"g","イ":"a","ロ":"b",
      "＃":"+", "#":"+", "♯":"+", "嬰":"+", "♭":"-", "変":"-",
      "ー":"^",//タイ
      "「":"'", "」":"'",//和音
      "【":"[", "】":"]",//繰り返し
      "連符":"D", "Div":"D", "DIV":"D",
      "調":"K", "♮":"*",
      "方向左":"P0","方向前":"P63.5","方向右":"P127","方向左前":"P32","方向右前":"P96","方向回":"P@","す":"",
      "　":""," ":"","	":"", "=":"", "＝":"", "(":"", ")":"", "（":"", "）":"", "|":"",
    }
    変数 情報変換リスト＝{
      "Lyric":"歌詞", "TrackName":"曲名", "Copyright":"作者", "MetaText":"コメント"
    }
    ドレミ＝ドレミの「//.*?\n」を改行に正規表現置換。# コメントを削除
    ドレミ＝ドレミの「//.*?$」を空に正規表現置換。# コメントを削除
    # 範囲コメントを削除
    （ドレミの０から「/*」を文字検索）＞０の間
        もし、（ドレミの０から「*/」を文字検索）＝０ならば、抜ける。
        ドレミ＝ドレミの『/\/\*[\s\S]*?\*\//』を改行に正規表現置換。
    ここまで。
    ドレミ＝ドレミの『((Div)|(DIV)|連符)[\{|｛](.*?)[\}|｝]』を『D($4)』へ正規表現置換。
    情報変換リストを反復。ドレミ＝ドレミの対象キーを対象に置換。。。
    ドレミ＝ドレミからドレミ情報取得処理。
    ドレミ＝ドレミの『D\((.*?)\)』を『D{$1}』へ正規表現置換。
    ドレミ＝ドレミの『((KeyFlag)|調)(.)[\(|（](.*?)[\)|）]』を『調$3{$4}』へ正規表現置換。
    ストトン変換リストを反復。ドレミ＝ドレミの対象キーを対象に置換。。。
    ドレミを半角変換して戻す。
ここまで。

●(mmlから|mmlの)ドレミ情報取得処理
    「曲名,作者,コメント,歌詞,字幕表示」を「,」で区切って反復。:
        キー＝対象。
        もし、キー≠「字幕表示」ならば、:
            情報取得正規表現＝「/{キー}」&『[\s|\=|＝|　]*[\{|｛][\s\S]*?[\}|｝]/』。
            抽出用正規表現＝「/(?<={キー}」&『[\s|\=|＝|　]*[\{|｛])[\s\S]*?(?=[\}|｝])/』。
        違えば、:
            情報取得正規表現＝「/{キー}」&『[\s|\=|＝|　]*[\{|｛][\s\S]*[\}|｝]/』。
            抽出用正規表現＝「/(?<={キー}」&『[\s|\=|＝|　]*[\{|｛])[\s\S]*(?=[\}|｝])/』。
        もし、（mmlを情報取得正規表現で正規表現マッチ）≠NULLならば、:
            （mmlを情報取得正規表現で正規表現マッチ）≠NULLの間:
                内容＝mmlを抽出用正規表現で正規表現マッチ。
                mml=mmlの(mmlを情報取得正規表現で正規表現マッチ)を空に置換。
                もし、キー≠「字幕表示」ならば、:
                    もし、((内容の1だけ文字左部分)＝「"」)かつ((内容の1だけ文字右部分)＝「"」)ならば、:
                        内容＝内容の（内容の文字数）から1だけ文字削除。
                        内容＝内容の1から1だけ文字削除。
                    もし、ドレミ演奏データ["情報"][キー]＝NULLならば、ドレミ演奏データ["情報"][キー]＝空。
                    もし、（キー＝「曲名」）または（キー＝「作者」）ならば、ドレミ演奏データ["情報"][キー]＝内容。
                    違えば、ドレミ演奏データ["情報"][キー]＝ドレミ演奏データ["情報"][キー]に内容を一行追加。
                違えば、:
                    もし、ドレミ演奏データ["情報"]["字幕設定"]＝NULLならば、ドレミ字幕描画設定作成。
                    「{波カッコ}{内容}{波カッコ閉じ}」をJSONデコードして反復:
                        項目＝対象キー。設定＝対象。
                        設定を反復:
                            もし、ドレミ演奏データ["情報"]["字幕設定"][項目]＝NULLならば、ドレミ演奏データ["情報"]["字幕設定"][項目]＝空辞書。
                            
                            ドレミ演奏データ["情報"]["字幕設定"][項目][対象キー]に対象を代入。
    mml＝mmlの「字幕表示」を「J」に置換。
    mmlを戻す。
ここまで。

＃＃MML→演奏データ
●(mmlから|mmlを)MML演奏データ変換処理
    変数 設定＝MML変換設定辞書。
    (mmlの文字数)＞0の間:
        cmd=mmlの1だけ文字左部分
        mml=mmlの1から1文字削除。
        cmdで条件分岐:
          「c」ならば、mml=mmlからcmdでMML演奏データ作成。。。// 音名
          「d」ならば、mml=mmlからcmdでMML演奏データ作成。。。
          「e」ならば、mml=mmlからcmdでMML演奏データ作成。。。
          「f」ならば、mml=mmlからcmdでMML演奏データ作成。。。
          「g」ならば、mml=mmlからcmdでMML演奏データ作成。。。
          「a」ならば、mml=mmlからcmdでMML演奏データ作成。。。
          「b」ならば、mml=mmlからcmdでMML演奏データ作成。。。
          「r」ならば、// 休符
              音符＝設定["音符"][設定["トラック"]]。
              音長記号＝mmlを「^[\d|\^|\.]+」で正規表現マッチ。
              もし、それ≠NULLならば、
                  mml=mmlの1から(音長記号の文字数)だけ文字削除。
                  音長記号を「/^\d+/」で正規表現マッチ。
                  もし、それ＝NULLならば、音符＝音符に音符で音長記号のMML音長取得処理。
                  違えば、音符＝0に音符で音長記号のMML音長取得処理。
              ここまで。
              音長＝((60/設定["テンポ"]*4)*音符)。
              設定["開始時間"][設定["トラック"]]＝設定["開始時間"][設定["トラック"]]＋音長。
          ここまで。
          「>」ならば、設定["音階"][設定["トラック"]]を１増やす。。。
          「<」ならば、設定["音階"][設定["トラック"]]を１減らす。。。
          「`」ならば、設定["仮音階"][設定["トラック"]]＝1。。。// ` 一音だけ音階を上げる
          「"」ならば、設定["仮音階"][設定["トラック"]]＝-1。。。// " 一音だけ音階を下げる
          「o」ならば、mml=mmlからcmdのMML値取得処理。。。// o 音階
          「l」ならば、mml=mmlからcmdのMML値取得処理。。。// l 音符
          「v」ならば、mml=mmlからcmdのMML値取得処理。。。// v 音量
          「q」ならば、mml=mmlからcmdのMML値取得処理。。。// q ゲート
          「@」ならば、mml=mmlからcmdのMML値取得処理。。。// q 音色
          「T」ならば、mml=mmlからcmdのMML値取得処理。。。// T テンポ
          「!」ならば、mml=mmlからcmdのMML値取得処理。。。// ! トラック
          「'」ならば、// ' 和音
              和音mml＝mmlの「'」まで切り取る。mml＝対象。// '和音終わり
              和音長＝mmlを「^[\d|\^|\.]+」で正規表現マッチ。
              もし、和音長≠NULLならば、mml=mmlの1から(和音長の文字数)だけ文字削除。
              設定["和音"][設定["トラック"]]＝和音長。
              和音mmlをMML演奏データ変換処理。
              # 開始時間を進める
              音符＝設定["音符"][設定["トラック"]]。
              もし、和音長＝NULLならば、
                  和音長＝音符。
              違えば、
                  和音長を「/^\d+/」で正規表現マッチ。
                  もし、それ＝NULLならば、和音長＝音符に音符で和音長のMML音長取得処理。
                  違えば、和音長＝0に音符で和音長のMML音長取得処理。
              ここまで。
              和音長＝(60/設定["テンポ"]*4)*和音長。
              設定["開始時間"][設定["トラック"]]＝設定["開始時間"][設定["トラック"]]＋和音長。
              設定["和音"][設定["トラック"]]＝オフ。
          ここまで。
          「[」ならば、// [ ループ開始
              ループ回数＝mmlを「/^\d+/」で正規表現マッチ。
              もし、ループ回数＝NULLならば、ループ回数＝2。
              違えば、mml=mmlの1から(ループ回数の文字数)だけ文字削除。
              mmlの「]」まで切り取る。mml＝対象。// ]ループ終了
              対象mml＝それを「:」で文字列分割。// 繰り返し最後の時、ループから脱出
              ループmml＝空。
              ループ回数回
                  もし、（回数＝ループ回数）または（対象mml[1]＝未定義）ならば、ループmml＝ループmml&対象mml[0]。
                  違えば、ループmml＝ループmml&対象mml[0]&対象mml[1]。
              ここまで。
              mml=ループmml&mml。
          ここまで。
          「D」ならば、//連符
              連符mml＝mmlを『/(?<=^\{).*?(?=\})/』で正規表現マッチ。
              連符数＝連符mmlの文字数。
              mml=mmlの1から連符数+2だけ文字削除。
              連符長＝mmlを「^[\d|\^|\.]+」で正規表現マッチ。
              もし、連符長≠NULLならば、mml=mmlの1から(連符長の文字数)だけ文字削除。
              設定["連符"][設定["トラック"]]＝[連符数,連符長]。
              連符mmlをMML演奏データ変換処理。
              設定["連符"][設定["トラック"]]＝オフ。
          ここまで。
          「K」ならば、//調
              調号=mmlの1だけ文字左部分
              mml=mmlの1から1文字削除。
              音名＝mmlを『/(?<=^\{).*?(?=\})/』で正規表現マッチ。// { 
              mml=mmlの1から(音名の文字数)+2だけ文字削除。
              もし、音名＝空ならば、設定["調"]＝空。
              違えば、設定["調"]＝[調号,音名]。
          ここまで。
          「J」ならば、//字幕表示に連動するトラック
              もし、ドレミ演奏データ["情報"]["字幕設定"]＝NULLならば、ドレミ字幕描画設定作成。
              トラック＝mmlを「/^\d+/」で正規表現マッチ。
              もし、トラック≠NULLならば、
                  mml=mmlの1から(トラックの文字数)だけ文字削除。
                  ドレミ演奏データ["情報"]["字幕設定"]["歌詞"]["トラック"]にトラックを代入。
              ここまで。
          ここまで。
          「W」ならば、//ビブラート
                ビブラート＝mmlを「^\d+」で正規表現マッチ。
                もし、ビブラート≠NULLならば、mml=mmlの1から(ビブラートの文字数)だけ文字削除。
                もし、ビブラート＝NULLならば、ビブラート＝10。
                設定["ビブラート"][設定["トラック"]]＝ビブラート。
          ここまで。
          「P」ならば、//方向
                もし、（mmlの1だけ文字左部分）＝「@」ならば、
                    設定["方向"][設定["トラック"]]＝「回転」
                    mml=mmlの1から1文字削除。
                違えば、
                    方向＝mmlを「^\d+(\.\d+)?」で正規表現マッチ。
                    もし、方向≠NULLならば、mml=mmlの1から(方向の文字数)だけ文字削除。
                    もし、方向＝NULLならば、方向＝63.5。
                    設定["方向"][設定["トラック"]]＝(1/63.5)*方向-1。
                ここまで。
          ここまで。
          「S」ならば、//ペダル
              もし、（mmlの1だけ文字左部分）＝0ならば、:
                  設定["ペダル"][設定["トラック"]]＝-1。
              違えば、:
                  設定["ペダル"][設定["トラック"]]＝(ドレミ演奏データ["データ"]の配列要素数)。
              mml=mmlの1から1文字削除。
          ここまで。
          「C」ならば、//クレッシェンド、デクレッシェンド
              記号＝mmlの1だけ文字左部分。mml=mmlの1から1文字削除。
              引数＝mmlを「^([\d\.^]+)\,?(\d+(\.\d+)?)?\,?(\d+(\.\d+)?)?」で正規表現マッチ。
              もし、引数＝NULLならば、:
                  記号で条件分岐:
                      「<」ならば、//クレッシェンド
                          設定["音量推移"][設定["トラック"]]＝[0に0で1のMML音長取得処理,40,127,0]。
                          設定["仮音量"][設定["トラック"]]＝40-設定["音量"][設定["トラック"]]。
                      。。。
                      「>」ならば、//デクレッシェンド
                          設定["音量推移"][設定["トラック"]]＝[0に0で1のMML音長取得処理,127,40,0]。
                          設定["仮音量"][設定["トラック"]]＝127-設定["音量"][設定["トラック"]]。
                      。。。
                      「0」ならば、//音量戻す
                          設定["音量推移"][設定["トラック"]]＝空配列。
                          設定["仮音量"][設定["トラック"]]＝0。
                      。。。
              違えば、:
                  mml=mmlの1から(引数の文字数)だけ文字削除。
                  引数＝引数を「,」で区切る。
                  引数の要素数で条件分岐:
                      1ならば、//音長
                          記号で条件分岐:
                              「<」ならば、//クレッシェンド
                                  設定["音量推移"][設定["トラック"]]＝[0に0で引数[0]のMML音長取得処理,40,127,0]。
                                  設定["仮音量"][設定["トラック"]]＝40-設定["音量"][設定["トラック"]]。
                              。。。
                              「>」ならば、//デクレッシェンド
                                  設定["音量推移"][設定["トラック"]]＝[0に0で引数[0]のMML音長取得処理,127,40,0]。
                                  設定["仮音量"][設定["トラック"]]＝127-設定["音量"][設定["トラック"]]。
                              。。。
                      。。。
                      2ならば、//音長,最終値
                          元音量＝設定["音量"][設定["トラック"]]+設定["仮音量"][設定["トラック"]]。
                          設定["音量推移"][設定["トラック"]]＝[0に0で引数[0]のMML音長取得処理,元音量,引数[1],0]。
                      。。。
                      3ならば、//音長,開始値,最終値
                          設定["音量推移"][設定["トラック"]]＝[0に0で引数[0]のMML音長取得処理,引数[1],引数[2],0]。
                          設定["仮音量"][設定["トラック"]]＝引数[1]-設定["音量"][設定["トラック"]]。
                      。。。
          ここまで。
    ドレミ演奏データ["データ"]の「停止時間」を表数値ソート。
    ドレミ演奏データ["情報"]["曲長"]＝ドレミ演奏データ["データ"][(ドレミ演奏データ["データ"]の要素数)-1]["停止時間"]。
    ドレミ演奏データ["データ"]の「開始時間」を表数値ソート。
ここまで。

●(mmlから音で)MML演奏データ作成
    変数 設定＝MML変換設定辞書。
    変数 トラック＝設定["トラック"]。
    変数 音符＝設定["音符"][トラック]。
    変数 音長＝((60/設定["テンポ"]*4)*音符)。
    変数 音階＝設定["音階"][トラック]。
    変数 仮音階＝設定["仮音階"][トラック]。
    変数 ゲート＝設定["ゲート"][トラック]/100。
    変数 ビブラート＝設定["ビブラート"][トラック]。
    変数 方向＝設定["方向"][トラック]。

    # 音量大小設定
    変数 仮音量＝設定["仮音量"][トラック]。
    変数 音量推移＝設定["音量推移"][トラック]。
    もし、音量推移≠空ならば、:
        設定["仮音量"][トラック]＝仮音量+((音量推移[2]-音量推移[1])/音量推移[0])*音符。
        音量推移[3]＝音量推移[3]+音符。
        もし、音量推移[3]≧音量推移[0]ならば、:
            設定["仮音量"][トラック]＝音量推移[2]-設定["音量"][トラック]。音量推移＝空配列。
    音量＝設定["音量"][トラック]＋仮音量。

    音で条件分岐:
      「c」ならば、No=0。。。
      「d」ならば、No=2。。。
      「e」ならば、No=4。。。
      「f」ならば、No=5。。。
      「g」ならば、No=7。。。
      「a」ならば、No=9。。。
      「b」ならば、No=11。。。
    変数 調＝設定["調"]。
    もし、調≠空ならば、:
        調号＝調[0]。
        音名＝調[1]。
        音名で0から音を文字検索。
        もし、それ≠０ならば、:
            もし、調号＝「+」ならば、Noを1増やす。
            もし、調号＝「-」ならば、Noを1減らす。

    cmd＝mmlの1だけ文字左部分。
    cmdで条件分岐:
      「+」ならば、:
          シャープ＝mmlを「^\++」で正規表現マッチ。
          mml=mmlの1から(シャープの文字数)だけ文字削除。
          Noを(シャープの文字数)増やす。
      「-」ならば、:
          フラット＝mmlを「^\-+」で正規表現マッチ。
          mml=mmlの1から(フラットの文字数)だけ文字削除。
          Noを(フラットの文字数)減らす。
      「*」ならば、:
          mml=mmlの1から1だけ文字削除。
          もし、調≠空ならば、:
              調号＝調[0]。
              音名＝調[1]。
              音名で0から音を文字検索。
              もし、それ≠０ならば、:
                  もし、調号＝「+」ならば、Noを1減らす。
                  もし、調号＝「-」ならば、Noを1増やす。

    変数 和音＝設定["和音"][トラック]。
    変数 連符＝設定["連符"][トラック]。
    もし、和音≠オフならば、音長記号＝和音。
    違えば、もし、連符≠オフならば、音長記号＝連符[1]。
    違えば、音長記号＝mmlを「^[\d|\^|\.]+」で正規表現マッチ。
    もし、音長記号≠NULLならば、
        もし、（和音=オフ）かつ（連符=オフ）ならば、mml=mmlの1から(音長記号の文字数)だけ文字削除。
        音長記号を「/^\d+/」で正規表現マッチ。
        もし、それ＝NULLならば、音符＝音符に音符で音長記号のMML音長取得処理。
        違えば、音符＝0に音符で音長記号のMML音長取得処理。
        音長＝((60/設定["テンポ"]*4)*音符)。
    ここまで。
    もし、連符≠オフならば、音長＝音長/連符[0]。
    変数 データ＝空辞書。
    データ["トラック"]＝トラック。
    データ["音色"]＝設定["音色"][トラック]。
    国際式＝12。ヤマハ式＝24。# ラシイ。
    データ["音番号"]＝(音階+仮音階)*12+No+国際式。# 真ん中のドが60になるようにする。
    設定["仮音階"][設定["トラック"]]＝0。
    データ["音量"]＝0.1*音量/127。
    データ["開始時間"]＝設定["開始時間"][トラック]。
    データ["停止時間"]＝データ["開始時間"]＋音長*ゲート。
    もし、(設定["ペダル"][トラック]≠-1)かつ(設定["ペダル"][トラック]≠(ドレミ演奏データ["データ"]の配列要素数))ならば、
        数を設定["ペダル"][トラック]から(ドレミ演奏データ["データ"]の配列要素数)-1まで繰り返す:
            ドレミ演奏データ["データ"][数]["停止時間"]を(音長*ゲート)だけ増やす。
    ここまで。
    もし、設定["和音"][トラック]＝オフならば、#和音の場合は開始時間を進めない。
        設定["開始時間"][トラック]＝データ["開始時間"]＋音長。
    ここまで。
    もし、ビブラート≠オフならば、データ["ビブラート"]＝ビブラートを整数変換。
    もし、方向≠0ならば、データ["方向"]＝方向。
    データをドレミ演奏データ["データ"]に配列追加。
    mmlを戻す。
ここまで。

●(結果に音符で音長記号の)MML音長取得処理
    cmd=音長記号の1だけ文字左部分。
    もし、それが「^」ならば、# タイ
        音長記号を「/^\^+/」で正規表現マッチ。
        タイ数＝それの文字数。タイ長＝0。
        音長記号=音長記号の1からタイ数だけ文字削除。
        音長記号を「/^\d+/」で正規表現マッチ。
        もし、それ≠NULLならば、
            タイ長＝0に音符で音長記号のMML音長計算処理。
            音長記号＝対象。
            タイ数＝タイ数-1。
        ここまで。
        結果＝結果+音符*タイ数＋タイ長。
        音符＝タイ長。
    違えば、
        音長記号を「/^\d+/」で正規表現マッチ。
        音長＝0に音符で音長記号のMML音長計算処理。
        音長記号＝対象。
        結果＝結果＋音長。
    ここまで。
    もし、音長記号≠空ならば、
        結果に音符で音長記号のMML音長取得処理。
    違えば、
        結果を戻す。
    ここまで。
ここまで。

●(結果に音符で音長記号の)MML音長計算処理
    cmd=音長記号の1だけ文字左部分。
    もし、cmd=「.」ならば、:
        音長記号を「/^\.+/」で正規表現マッチ。//付点
        付点数＝それの文字数。
        音長記号＝音長記号の1から付点数だけ文字削除。
        付点数回:
            結果＝結果＋音符/2。
            音符＝音符/2。
    違えば、:
        音長記号を「/^\d+/」で正規表現マッチ。//数字
        音符＝それ。
        音長記号＝音長記号の1から(音符の文字数)だけ文字削除。
        音符＝1/音符
        結果＝結果+音符。
    もし、(音長記号≠空)かつ((音長記号の1だけ文字左部分)≠「^」)ならば、:
        結果に音符で音長記号のMML音長計算処理。
    違えば、:
        対象＝音長記号。
        結果を戻す。
ここまで。

●(mmlからcmdの)MML値取得処理
    変数 設定＝MML変換設定辞書。
    変数 トラック＝設定["トラック"]。
    変数 値＝mmlを「^[\d|\.]+」で正規表現マッチ。
    もし、値＝NULLならば、mmlで戻る。
    mml=mmlの1から(値の文字数)だけ文字削除。
    もし、cmd≠「l」ならば、値＝値を整数変換。
    cmdで条件分岐:
      「n」ならば、設定["Len"]＝値。。。
      「o」ならば、設定["音階"][トラック]＝値。。。
      「l」ならば、
          音長＝0に0で値のMML音長取得処理。
          設定["音符"][トラック]＝音長。
      ここまで。
      「v」ならば、設定["音量"][トラック]＝値。。。
      「q」ならば、設定["ゲート"][トラック]＝値。。。
      「@」ならば、設定["音色"][トラック]＝値。。。
      「T」ならば、設定["テンポ"]＝値。。。
      「!」ならば、
          設定["トラック"]＝値。トラック＝値。
          # 新しいトラックならデフォルト値を設定。
          もし、設定["開始時間"][トラック]＝未定義ならば、トラックのMML変換設定辞書トラック作成。
      ここまで。
    mmlを戻す。
ここまで。

＃＃字幕データ
●ドレミ字幕データ作成
    変数 字幕設定＝ドレミ演奏データ["情報"]["字幕設定"]。
    F=関数(演奏データ) それは(演奏データ["トラック"]＝ドレミ演奏データ["情報"]["字幕設定"]["歌詞"]["トラック"]) ここまで。
    変数 カラオケトラック＝Fでドレミ演奏データ["データ"]を配列フィルタ。
    もし、（カラオケトラックの配列要素数）＝０ならば、戻る。
    ドレミ演奏データ["字幕データ"]＝空配列。
    変数 字幕データ＝ドレミ演奏データ["字幕データ"]。
    歌詞＝ドレミ演奏データ["情報"]["歌詞"]を文字列分解。
    C=-1。
    それの要素数回:
        もし、歌詞[回数-1]＝改行ならば、:
            もし、字幕データ[C]["改行"]＝NULLならば、字幕データ[C]["改行"]＝0。
            字幕データ[C]["改行"]を１増やす。
        違えば、:
            C=C+1。
            字幕データ[C]＝空辞書。
            字幕データ[C]["文字"]＝歌詞[回数-1]。
    カラオケトラックを反復:
       もし、字幕データ[対象キー]＝NULLならば、抜ける。
       字幕データ[対象キー]["時間"]＝対象["開始時間"]。
    字幕設定["描画X"]＝字幕設定["歌詞"]["X"]。
    字幕設定["描画Y"]＝字幕設定["歌詞"]["Y"]。
ここまで。

＃＃設定辞書初期化
●MML変換設定辞書初期化
  MML変換設定辞書＝{
    "トラック":0,
    "テンポ":120,
    "調":空,
    "開始時間":[],
    "音色":[],
    "音階":[],
    "仮音階":[],
    "音量":[],
    "仮音量":[],
    "音量推移":[],
    "音符":[],
    "ゲート":[],
    "和音":[],
    "連符":[],
    "ビブラート":[],
    "方向":[],
    "ペダル":[]
  }
  0のMML変換設定辞書トラック作成。
ここまで。

●(Noの)MML変換設定辞書トラック作成
    設定＝MML変換設定辞書
    設定["開始時間"][No]＝0。
    設定["音色"][No]＝0。
    設定["音階"][No]＝4。
    設定["仮音階"][No]＝0。
    設定["音量"][No]＝100。
    設定["仮音量"][No]＝0。
    設定["音量推移"][No]＝空配列。
    設定["音符"][No]＝0.25。//四分音符
    設定["ゲート"][No]＝80。
    設定["和音"][No]＝オフ。
    設定["連符"][No]＝オフ。
    設定["ビブラート"][No]＝オフ。
    設定["方向"][No]＝0。
    設定["ペダル"][No]＝-1。
ここまで。


●(設定で)作者X位置計算処理
    曲名文字数,曲名文字サイズ,作者文字数,作者文字サイズ＝設定。
    X＝(曲名文字数*曲名文字サイズ)/2-(作者文字数*作者文字サイズ)/2＋20。
    もし、X＜30ならば、X=30。
    Xを戻す。
ここまで。

●(描画項目で)字幕Y位置計算処理
    もし、描画項目＝空ならば、0で戻る。
    前項目＝描画項目の配列ポップ。
    Y＝ドレミ演奏データ["情報"]["字幕設定"][前項目]["Y"]。
    もし、前項目＝「コメント」ならば、:
        文字サイズ＝ドレミ演奏データ["情報"]["字幕設定"]["コメント"]["文字サイズ"]。
        ドレミ演奏データ["情報"]["コメント"]を改行で区切る。
        Y＝Y+((それの配列要素数)-2)*文字サイズ。
    Yで戻る。
ここまで。

●ドレミ字幕描画設定作成
    ドレミ演奏データ["情報"]["字幕設定"]＝空辞書。
    変数 MML字幕描画設定＝ドレミ演奏データ["情報"]["字幕設定"]。
    変数 描画項目＝空配列。
    「曲名,作者,コメント,歌詞」を「,」で区切って反復。:
       キー＝対象。No＝対象キー。
       もし、ドレミ演奏データ["情報"][キー]≠NULLならば、:
         MML字幕描画設定[キー]＝空辞書。
         キーで条件分岐:
           「曲名」ならば、:
               文字サイズ＝28。
               MML字幕描画設定["曲名"]＝{
                 "X":20,
                 "Y":文字サイズ+2,
                 "文字サイズ":文字サイズ,
                 "文字色":黒色,
               }
           「作者」ならば、:
               文字サイズ＝20。
               もし、ドレミ演奏データ["情報"]["曲名"]≠NULLならば、
                   曲名文字数＝ドレミ演奏データ["情報"]["曲名"]の文字数。
                   曲名文字サイズ＝MML字幕描画設定["曲名"]["文字サイズ"]。
                   作者文字数＝ドレミ演奏データ["情報"]["作者"]の文字数。
                   X＝[曲名文字数,曲名文字サイズ,作者文字数,文字サイズ]で作者X位置計算処理。
                違えば、
                    X=30。
                ここまで。
               Y＝描画項目で字幕Y位置計算処理。
               MML字幕描画設定["作者"]＝{
                 "X":X,
                 "Y":Y+文字サイズ+4,
                 "文字サイズ":文字サイズ,
                 "文字色":黒色,
               }
           「コメント」ならば、:
               文字サイズ＝14。
               Y＝描画項目で字幕Y位置計算処理。
               MML字幕描画設定["コメント"]＝{
                 "X":20,
                 "Y":Y+文字サイズ+8,
                 "文字サイズ":文字サイズ,
                 "文字色":黒色,
               }
           「歌詞」ならば、:
               文字サイズ＝20。
               Y＝描画項目で字幕Y位置計算処理。
               MML字幕描画設定["歌詞"]＝{
                 "X":20,
                 "Y":Y+文字サイズ+20,
                 "文字サイズ":文字サイズ,
                 "文字色":銀色,
                 "トラック":0,
                 "カラオケ文字色":赤色,
               }
               MML字幕描画設定["カウンタ"]＝0。
         描画項目にキーを配列追加。
ここまで。

●ドレミ描画オプション設定辞書初期化
    ドレミ描画オプション設定辞書["波形"]＝{
        "データサイズ":512
    }。
    ドレミ描画オプション設定辞書["鍵盤"]＝{
        "連携":オフ,
        "演奏データ":{},
        "白鍵":{
            "線色":黒色, "塗色":白色, "押下時塗色":"#FFCCCC"
        },
        "黒鍵":{
            "線色":黒色, "塗色":黒色, "押下時塗色":"#CCCCFF",
            "サイズ":[0.6,0.6]
        }
    }。
ここまで。
#------------------------------------------------