/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
　ドレミプレーヤー(doremi.nako3)　v0.18.0

　Web Audio APIを使ってドレミのテキストを演奏したりするやつ
　歌詞のカラオケ表示付き
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
＃変数
＃＃演奏データ作成用
MML変換設定辞書とは変数。
変数 MML演奏データ＝空辞書。

#------------------------------------------------
＃ ドレミ演奏命令
#------------------------------------------------
●(ドレミを|ドレミの)ドレミ演奏
    A＝オーディオコンテキスト作成。
    もし、(ドレミの変数型確認)＝「string」ならば、ドレミ＝ドレミからドレミ演奏データ作成。
    Aでドレミをドレミデータ演奏。
    Aを戻す。
ここまで。

# オーディオコンテキストを指定する
●(Aを|Aの)ドレミ演奏停止
    もし、A≠NULLならば、:
        Aの「close」を[]でJSメソッド実行。
        A=NULL。
ここまで。

●(Aを|Aの)ドレミ演奏一時停止
    もし、A≠NULLならば、Aの「suspend」を[]でJSメソッド実行。
ここまで。

●(Aを|Aの)ドレミ演奏再開
    もし、A≠NULLならば、Aの「resume」を[]でJSメソッド実行。
ここまで。
#------------------------------------------------
＃＃ドレミ演奏の内容
# まずオーディオコンテキストを作る
●オーディオコンテキスト作成
    「new AudioContext()||webkitAudioContext()」をJS実行。
ここまで。

# ドレミのテキストやMMLから演奏データを作成する
●(ドレミから|ドレミの)ドレミ演奏データ作成
    MML変換設定辞書初期化。
    MML演奏データ＝空辞書。
    MML演奏データ["情報"]＝空辞書。
    MML演奏データ["データ"]＝空配列。
    ドレミ＝ドレミをストトンMML変換処理。
    ドレミをMML演奏データ変換処理。
    もし、MML演奏データ["情報"]["字幕設定"]≠NULLならば、ドレミ字幕データ作成。
    MML演奏データを戻す。
ここまで。

# 演奏データを再生する
# Aはオーディオコンテキスト
●(Aでドレミデータを|ドレミデータの)ドレミデータ演奏
    ドレミデータのドレミ情報描画。
    ドレミデータ["データ"]を反復:
      もし、対象["音量"]＞0ならば、:
        音番号＝対象["音番号"]。
        開始時間＝対象["開始時間"]。
        停止時間＝対象["停止時間"]。
        余韻＝対象["音色"]の余韻長さ計算処理。
        オシレータ＝Aに対象で音色準備処理。
        オシレータ["frequency"]["value"]＝音番号を周波数変換処理。
        オシレータの「start」を[開始時間]でJSメソッド実行。
        オシレータの「stop」を[停止時間+余韻]でJSメソッド実行。
    Aとドレミデータのドレミ演奏タイマー。
ここまで。
#------------------------------------------------
＃ドレミデータ演奏の下請け
＃＃タイマー
●(Aとドレミデータの)ドレミ演奏タイマー
    Cとは変数。字幕データとは変数。
    もし、(ドレミデータ["情報"]["字幕設定"]≠NULL)かつ(ドレミデータ["字幕データ"]≠NULL)ならば、:
        C＝ドレミデータ["情報"]["字幕設定"]["カウンタ"]。
        字幕データ＝ドレミデータ["字幕データ"][C]。
    もし、A＝NULLならば、:
        もし、字幕データ≠NULLならば、ドレミデータ["情報"]["字幕設定"]["カウンタ"]＝0。
        戻る。
    違えば、もし、A["currentTime"]＞(ドレミデータ["情報"]["曲長"]＋2)ならば、:
        Aをドレミ演奏停止。
        戻る。
    違えば、もし、字幕データ≠NULLならば、:
        もし、A["currentTime"]＞字幕データ["時間"]ならば、:
            ドレミデータのCをドレミ字幕描画。
            ドレミデータ["情報"]["字幕設定"]["カウンタ"]を１増やす。。
    0.01秒待つ。
    Aとドレミデータのドレミ演奏タイマー。
ここまで。

＃＃字幕描画
●(ドレミデータのNoを)ドレミ字幕描画
    変数 字幕設定＝ドレミデータ["情報"]["字幕設定"]。
    変数 字幕データ＝ドレミデータ["字幕データ"][No]
    x＝字幕設定["描画X"]。y＝字幕設定["描画Y"]。
    字幕設定["歌詞"]["カラオケ文字色"]に塗り色設定。
    字幕設定["歌詞"]["文字サイズ"]に描画フォント設定。
    [x,y]へ字幕データ["文字"]を文字描画。
    字幕設定["描画X"]＝x+字幕設定["歌詞"]["文字サイズ"]。
    もし、字幕データ["改行"]＞０ならば、:
        字幕設定["描画X"]＝字幕設定["歌詞"]["X"]。
        字幕設定["描画Y"]＝y+字幕設定["歌詞"]["文字サイズ"]*字幕データ["改行"]。
ここまで。

●(ドレミデータの)ドレミ情報描画
    変数 ドレミ情報＝ドレミデータ["情報"]
    変数 字幕設定＝ドレミ情報["字幕設定"]。
    「曲名,作者」を「,」で区切って反復:
        もし、ドレミ情報[対象]＝NULLならば、続ける。
        x＝字幕設定[対象]["X"]。y＝字幕設定[対象]["Y"]。
        字幕設定[対象]["文字色"]に塗り色設定。
        字幕設定[対象]["文字サイズ"]に描画フォント設定。
        [x,y]へドレミ情報[対象]を文字描画。
    「コメント,歌詞」を「,」で区切って反復:
        もし、ドレミ情報[対象]＝NULLならば、続ける。
        x＝字幕設定[対象]["X"]。y＝字幕設定[対象]["Y"]。
        文字サイズ＝字幕設定[対象]["文字サイズ"]。
        字幕設定[対象]["文字色"]に塗り色設定。
        文字サイズに描画フォント設定。
        ドレミ情報[対象]を改行で区切って反復:
            [x,y]へ対象を文字描画。
            y＝y+文字サイズ。
ここまで。

＃＃ウェブオーディオAPI
●(オーディオコンテキストにデータで)音色準備処理とは
	オシレータ＝オーディオコンテキストの「createOscillator」を[]でJSメソッド実行。
	ゲイン＝オーディオコンテキストの「createGain」を[]でJSメソッド実行。
    # 音量設定
    音量＝データ["音量"]。
    開始時間＝データ["開始時間"]。
    停止時間＝データ["停止時間"]。
    ゲイン["gain"]の「setValueAtTime」を[音量,開始時間]でJSメソッド実行。
    # 音色設定
    //音色は10～19までサイン波、20～29まで矩形波、30～39まで鋸歯状波、40～49まで三角波。
    //0～9まで三角波(とりあえず三角波をデフォルトにする)
    //各1の位0～4まで単に余韻の長さの変化。5～9は発声時間固定で余韻の長さの変化。
    音色＝データ["音色"]。
    余韻＝音色の余韻長さ計算処理。
    オシレータ["type"]＝「triangle」//デフォルト
    もし、(10≦音色)かつ(音色＜20)ならば、オシレータ["type"]＝「sine」。
    もし、(20≦音色)かつ(音色＜30)ならば、オシレータ["type"]＝「square」。
    もし、(30≦音色)かつ(音色＜40)ならば、オシレータ["type"]＝「sawtooth」。
    もし、(40≦音色)かつ(音色＜50)ならば、オシレータ["type"]＝「triangle」。

    もし、((音色%10/5)を整数変換)＝0ならば、:
        ゲイン["gain"]の「setValueAtTime」を[音量,停止時間]でJSメソッド実行。
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[0.001,停止時間+余韻]でJSメソッド実行。
    違えば、:
        発声時間＝0.5。
        音長＝停止時間-開始時間。
        もし、発声時間＞音長ならば、発声時間＝音長。
        ゲイン["gain"]の「exponentialRampToValueAtTime」を[0.001,開始時間+発声時間+余韻]でJSメソッド実行。
    # 接続
    オシレータの「connect」を[ゲイン]でJSメソッド実行。
    それの「connect」を[オーディオコンテキスト["destination"]]でJSメソッド実行。
    オシレータを戻す。
ここまで。

●(音色の)余韻長さ計算処理とは
    余韻＝(音色%5)/2。もし、余韻＝0ならば、余韻＝0.1。
    余韻を戻す。
ここまで。

＃＃音番号を周波数に変換する式
●(音番号を)周波数変換処理とは
    440*(2^((音番号-69)/12))で戻る。
ここまで。
#------------------------------------------------


#------------------------------------------------
＃ MMLを演奏データに変換
#------------------------------------------------
＃＃ストトン→MML
●(ドレミから|ドレミを)ストトンMML変換処理
    変数 ストトン変換リスト＝{
      "トラック":"!", "TR":"!", "Track":"!", "NowTrack":"!",
      "テンポ":"T", "Tempo":"T",
      "音色":"@", "音階":"o", "音符":"l", "音長":"l", "音量":"v", "ゲート":"q",
      "上":">", "↑":">", "‘":"`",
      "下":"<", "↓":"<",
      "ド":"c", "レ":"d", "ミ":"e", "フ":"f", "ァ":"",
      "ソ":"g", "ラ":"a", "シ":"b", "ン":"r", "ッ":"r",
      "ど":"c", "れ":"d", "み":"e", "ふ":"f", "ぁ":"",
      "そ":"g", "ら":"a", "し":"b", "ん":"r", "っ":"r",
      "ハ":"c","ニ":"d","ホ":"e","ヘ":"f","ト":"g","イ":"a","ロ":"b",
      "＃":"+", "#":"+", "♯":"+", "嬰":"+", "♭":"-", "変":"-",
      "ー":"^",//タイ
      "「":"'", "」":"'",//和音
      "【":"[", "】":"]", "：":":",//繰り返し
      "連符":"D", "Div":"D", "DIV":"D",
      "調":"K", "＊":"*",
      "　":""," ":"","	":"", "=":"", "＝":"", "(":"", ")":"", "（":"", "）":"",
    }
    変数 情報変換リスト＝{
      "Lyric":"歌詞", "TrackName":"曲名", "Copyright":"作者", "MetaText":"コメント"
    }
    ドレミ＝ドレミの「//.*?\n」を改行に正規表現置換。# コメントを削除
    # 範囲コメントを削除
    （ドレミの０から「/*」を文字検索）＞０の間
        もし、（ドレミの０から「*/」を文字検索）＝０ならば、抜ける。
        ドレミ＝ドレミの『/\/\*[\s\S]*?\*\//』を改行に正規表現置換。
    ここまで。
    情報変換リストを反復。ドレミ＝ドレミの対象キーを対象に置換。。。
    ドレミ＝ドレミからMML情報取得処理。
    ドレミ＝ドレミの『調(.)[\(|（](.*?)[\)|）]』を『調$1{$2}』へ正規表現置換。
    ストトン変換リストを反復。ドレミ＝ドレミの対象キーを対象に置換。。。
    ドレミを半角変換して戻す。
ここまで。

●(mmlから|mmlの)MML情報取得処理
    「曲名,作者,コメント,歌詞,字幕表示」を「,」で区切って反復。:
        キー＝対象。
        もし、キー≠「字幕表示」ならば、:
            情報取得正規表現＝「/{キー}」&『[\s|\=|＝|\s]*[\{|｛][\s\S]*?[\}|｝]/』。
            抽出用正規表現＝「/(?<={キー}」&『[\s|\=|＝|\s]*[\{|｛])[\s\S]*?(?=[\}|｝])/』。
        違えば、:
            情報取得正規表現＝「/{キー}」&『[\s|\=|＝|\s]*[\{|｛][\s\S]*[\}|｝]/』。
            抽出用正規表現＝「/(?<={キー}」&『[\s|\=|＝|\s]*[\{|｛])[\s\S]*(?=[\}|｝])/』。
        もし、（mmlを情報取得正規表現で正規表現マッチ）≠NULLならば、:
                削除文字数＝（mmlを情報取得正規表現で正規表現マッチ）の文字数。
                内容＝mmlを抽出用正規表現で正規表現マッチ。
                mml=mmlの(mmlの0からキーを文字検索)から削除文字数だけ文字削除。
                もし、キー≠「字幕表示」ならば、:
                    もし、((内容の1だけ文字左部分)＝「"」)かつ((内容の1だけ文字右部分)＝「"」)ならば、:
                        内容＝内容の（内容の文字数）から1だけ文字削除。
                        内容＝内容の1から1だけ文字削除。
                    MML演奏データ["情報"][キー]＝空。
                    もし、（キー＝「曲名」）または（キー＝「作者」）ならば、MML演奏データ["情報"][キー]＝内容。
                    違えば、MML演奏データ["情報"][キー]＝MML演奏データ["情報"][キー]に内容を一行追加。
                違えば、:
                    もし、MML演奏データ["情報"]["字幕設定"]＝NULLならば、MML字幕描画設定作成。
                    「{波カッコ}{内容}{波カッコ閉じ}」をJSONデコードして反復:
                        項目＝対象キー。設定＝対象。
                        設定を反復:
                            もし、MML演奏データ["情報"]["字幕設定"][項目]＝NULLならば、MML演奏データ["情報"]["字幕設定"][項目]＝空辞書。
                            
                            MML演奏データ["情報"]["字幕設定"][項目][対象キー]に対象を代入。
    mml＝mmlの「字幕表示」を「J」に置換。
    mmlを戻す。
ここまで。

＃＃MML→演奏データ
●(mmlから|mmlを)MML演奏データ変換処理
    変数 設定＝MML変換設定辞書。
    (mmlの文字数)＞0の間:
        cmd=mmlの1だけ文字左部分
        mml=mmlの1から1文字削除。
        cmdで条件分岐:
          「c」ならば、mml=mmlからcmdでMML演奏データ作成。。。// 音名
          「d」ならば、mml=mmlからcmdでMML演奏データ作成。。。
          「e」ならば、mml=mmlからcmdでMML演奏データ作成。。。
          「f」ならば、mml=mmlからcmdでMML演奏データ作成。。。
          「g」ならば、mml=mmlからcmdでMML演奏データ作成。。。
          「a」ならば、mml=mmlからcmdでMML演奏データ作成。。。
          「b」ならば、mml=mmlからcmdでMML演奏データ作成。。。
          「r」ならば、// 休符
              音符＝設定["音符"][設定["トラック"]]。
              音長記号＝mmlを「^[\d|\^|\.]+」で正規表現マッチ。
              もし、それ≠NULLならば、
                  mml=mmlの1から(音長記号の文字数)だけ文字削除。
                  音長記号を「/^\d+/」で正規表現マッチ。
                  もし、それ＝NULLならば、音符＝音符に音符で音長記号のMML音長取得処理。
                  違えば、音符＝0に音符で音長記号のMML音長取得処理。
              ここまで。
              音長＝((60/設定["テンポ"]*4)*音符)。
              設定["開始時間"][設定["トラック"]]＝設定["開始時間"][設定["トラック"]]＋音長。
          ここまで。
          「>」ならば、設定["音階"][設定["トラック"]]を１増やす。。。
          「<」ならば、設定["音階"][設定["トラック"]]を１減らす。。。
          「`」ならば、設定["仮音階"][設定["トラック"]]＝1。。。// ` 一音だけ音階を上げる
          「"」ならば、設定["仮音階"][設定["トラック"]]＝-1。。。// " 一音だけ音階を下げる
          「o」ならば、mml=mmlからcmdのMML値取得処理。。。// o 音階
          「l」ならば、mml=mmlからcmdのMML値取得処理。。。// l 音符
          「v」ならば、mml=mmlからcmdのMML値取得処理。。。// v 音量
          「q」ならば、mml=mmlからcmdのMML値取得処理。。。// q ゲート
          「@」ならば、mml=mmlからcmdのMML値取得処理。。。// q 音色
          「T」ならば、mml=mmlからcmdのMML値取得処理。。。// T テンポ
          「!」ならば、mml=mmlからcmdのMML値取得処理。。。// ! トラック
          「'」ならば、// ' 和音
              和音mml＝mmlの「'」まで切り取る。mml＝対象。// '和音終わり
              和音長＝mmlを「^[\d|\^|\.]+」で正規表現マッチ。
              もし、和音長≠NULLならば、mml=mmlの1から(和音長の文字数)だけ文字削除。
              設定["和音"][設定["トラック"]]＝和音長。
              和音mmlをMML演奏データ変換処理。
              # 開始時間を進める
              音符＝設定["音符"][設定["トラック"]]。
              もし、和音長＝NULLならば、
                  和音長＝音符。
              違えば、
                  和音長を「/^\d+/」で正規表現マッチ。
                  もし、それ＝NULLならば、和音長＝音符に音符で和音長のMML音長取得処理。
                  違えば、和音長＝0に音符で和音長のMML音長取得処理。
              ここまで。
              和音長＝(60/設定["テンポ"]*4)*和音長。
              設定["開始時間"][設定["トラック"]]＝設定["開始時間"][設定["トラック"]]＋和音長。
              設定["和音"][設定["トラック"]]＝オフ。
          ここまで。
          「[」ならば、// [ ループ開始
              ループ回数＝mmlを「/^\d+/」で正規表現マッチ。
              もし、ループ回数＝NULLならば、ループ回数＝2。
              違えば、mml=mmlの1から(ループ回数の文字数)だけ文字削除。
              mmlの「]」まで切り取る。mml＝対象。// ]ループ終了
              対象mml＝それを「:」で文字列分割。// 繰り返し最後の時、ループから脱出
              ループmml＝空。
              ループ回数回
                  もし、（回数＝ループ回数）または（対象mml[1]＝未定義）ならば、ループmml＝ループmml&対象mml[0]。
                  違えば、ループmml＝ループmml&対象mml[0]&対象mml[1]。
              ここまで。
              mml=ループmml&mml。
          ここまで。
          「D」ならば、//連符
              連符mml＝mmlを『/(?<=^\{).*?(?=\})/』で正規表現マッチ。
              連符数＝連符mmlの文字数。
              mml=mmlの1から連符数+2だけ文字削除。
              連符長＝mmlを「^[\d|\^|\.]+」で正規表現マッチ。
              もし、連符長≠NULLならば、mml=mmlの1から(連符長の文字数)だけ文字削除。
              設定["連符"][設定["トラック"]]＝[連符数,連符長]。
              連符mmlをMML演奏データ変換処理。
              設定["連符"][設定["トラック"]]＝オフ。
          ここまで。
          「K」ならば、//調
              調号=mmlの1だけ文字左部分
              mml=mmlの1から1文字削除。
              音名＝mmlを『/(?<=^\{).*?(?=\})/』で正規表現マッチ。// { 
              mml=mmlの1から(音名の文字数)+2だけ文字削除。
              もし、音名＝空ならば、設定["調"]＝空。
              違えば、設定["調"]＝[調号,音名]。
          ここまで。
          「J」ならば、//字幕表示に連動するトラック
              もし、MML演奏データ["情報"]["字幕設定"]＝NULLならば、MML字幕描画設定作成。
              トラック＝mmlを「/^\d+/」で正規表現マッチ。
              もし、トラック≠NULLならば、
                  mml=mmlの1から(トラックの文字数)だけ文字削除。
                  MML演奏データ["情報"]["字幕設定"]["歌詞"]["トラック"]にトラックを代入。
              ここまで。
          ここまで。
    MML演奏データ["データ"]の「停止時間」を表数値ソート。
    MML演奏データ["情報"]["曲長"]＝MML演奏データ["データ"][(MML演奏データ["データ"]の要素数)-1]["停止時間"]。
    MML演奏データ["データ"]の「開始時間」を表数値ソート。
ここまで。

●(mmlから音で)MML演奏データ作成
    変数 設定＝MML変換設定辞書。
    変数 トラック＝設定["トラック"]。
    変数 音符＝設定["音符"][トラック]。
    変数 音長＝((60/設定["テンポ"]*4)*音符)。
    変数 音階＝設定["音階"][設定["トラック"]]。
    変数 仮音階＝設定["仮音階"][設定["トラック"]]。
    変数 ゲート＝設定["ゲート"][トラック]/100。

    音で条件分岐:
      「c」ならば、No=0。。。
      「d」ならば、No=2。。。
      「e」ならば、No=4。。。
      「f」ならば、No=5。。。
      「g」ならば、No=7。。。
      「a」ならば、No=9。。。
      「b」ならば、No=11。。。
    変数 調＝設定["調"]。
    もし、調≠空ならば、:
        調号＝調[0]。
        音名＝調[1]。
        音名で0から音を文字検索。
        もし、それ≠０ならば、:
            もし、調号＝「+」ならば、Noを1増やす。
            もし、調号＝「-」ならば、Noを1減らす。

    cmd＝mmlの1だけ文字左部分。
    cmdで条件分岐:
      「+」ならば、:
          シャープ＝mmlを「^\++」で正規表現マッチ。
          mml=mmlの1から(シャープの文字数)だけ文字削除。
          Noを(シャープの文字数)増やす。
      「-」ならば、:
          フラット＝mmlを「^\-+」で正規表現マッチ。
          mml=mmlの1から(フラットの文字数)だけ文字削除。
          Noを(フラットの文字数)減らす。
      「*」ならば、:
          mml=mmlの1から1だけ文字削除。
          もし、調≠空ならば、:
              調号＝調[0]。
              音名＝調[1]。
              音名で0から音を文字検索。
              もし、それ≠０ならば、:
                  もし、調号＝「+」ならば、Noを1減らす。
                  もし、調号＝「-」ならば、Noを1増やす。

    変数 和音＝設定["和音"][トラック]。
    変数 連符＝設定["連符"][トラック]。
    もし、和音≠オフならば、音長記号＝和音。
    違えば、もし、連符≠オフならば、音長記号＝連符[1]。
    違えば、音長記号＝mmlを「^[\d|\^|\.]+」で正規表現マッチ。
    もし、音長記号≠NULLならば、
        もし、（和音=オフ）かつ（連符=オフ）ならば、mml=mmlの1から(音長記号の文字数)だけ文字削除。
        音長記号を「/^\d+/」で正規表現マッチ。
        もし、それ＝NULLならば、音符＝音符に音符で音長記号のMML音長取得処理。
        違えば、音符＝0に音符で音長記号のMML音長取得処理。
        音長＝((60/設定["テンポ"]*4)*音符)。
    ここまで。
    もし、連符≠オフならば、音長＝音長/連符[0]。
    変数 データ＝空辞書。
    データ["トラック"]＝トラック。
    データ["音色"]＝設定["音色"][トラック]。
    データ["音番号"]＝(音階+仮音階)*12+No。
    設定["仮音階"][設定["トラック"]]＝0。
    データ["音量"]＝0.25*設定["音量"][トラック]/127。
    データ["開始時間"]＝設定["開始時間"][トラック]。
    データ["停止時間"]＝データ["開始時間"]＋音長*ゲート。
    もし、設定["和音"][トラック]＝オフならば、#和音の場合は開始時間を進めない。
        設定["開始時間"][トラック]＝データ["開始時間"]＋音長。
    ここまで。
    データをMML演奏データ["データ"]に配列追加。
    mmlを戻す。
ここまで。

●(結果に音符で音長記号の)MML音長取得処理
    cmd=音長記号の1だけ文字左部分。
    もし、それが「^」ならば、# タイ
        音長記号を「/^\^+/」で正規表現マッチ。
        タイ数＝それの文字数。タイ長＝0。
        音長記号=音長記号の1からタイ数だけ文字削除。
        音長記号を「/^\d+/」で正規表現マッチ。
        もし、それ≠NULLならば、
            タイ長＝0に音符で音長記号のMML音長計算処理。
            音長記号＝対象。
            タイ数＝タイ数-1。
        ここまで。
        結果＝結果+音符*タイ数＋タイ長。
        音符＝タイ長。
    違えば、
        音長記号を「/^\d+/」で正規表現マッチ。
        音長＝0に音符で音長記号のMML音長計算処理。
        音長記号＝対象。
        結果＝結果＋音長。
    ここまで。
    もし、音長記号≠空ならば、
        結果に音符で音長記号のMML音長取得処理。
    違えば、
        結果を戻す。
    ここまで。
ここまで。

●(結果に音符で音長記号の)MML音長計算処理
    cmd=音長記号の1だけ文字左部分。
    もし、cmd=「.」ならば、:
        音長記号を「/^\.+/」で正規表現マッチ。//付点
        付点数＝それの文字数。
        音長記号＝音長記号の1から付点数だけ文字削除。
        付点数回:
            結果＝結果＋音符/2。
            音符＝音符/2。
    違えば、:
        音長記号を「/^\d+/」で正規表現マッチ。//数字
        音符＝それ。
        音長記号＝音長記号の1から(音符の文字数)だけ文字削除。
        音符＝1/音符
        結果＝結果+音符。
    もし、(音長記号≠空)かつ((音長記号の1だけ文字左部分)≠「^」)ならば、:
        結果に音符で音長記号のMML音長計算処理。
    違えば、:
        対象＝音長記号。
        結果を戻す。
ここまで。

●(mmlからcmdの)MML値取得処理
    変数 設定＝MML変換設定辞書。
    変数 トラック＝設定["トラック"]。
    変数 値＝mmlを「^[\d|\.]+」で正規表現マッチ。
    もし、値＝NULLならば、mmlで戻る。
    mml=mmlの1から(値の文字数)だけ文字削除。
    値＝値を整数変換。
    cmdで条件分岐:
      「n」ならば、設定["Len"]＝値。。。
      「o」ならば、設定["音階"][トラック]＝値。。。
      「l」ならば、
          音長＝0に0で値のMML音長取得処理。
          設定["音符"][トラック]＝音長。
      ここまで。
      「v」ならば、設定["音量"][トラック]＝値。。。
      「q」ならば、設定["ゲート"][トラック]＝値。。。
      「@」ならば、設定["音色"][トラック]＝値。。。
      「T」ならば、設定["テンポ"]＝値。。。
      「!」ならば、
          設定["トラック"]＝値。トラック＝値。
          # 新しいトラックならデフォルト値を設定。
          もし、設定["開始時間"][トラック]＝未定義ならば、トラックのMML変換設定辞書トラック作成。
      ここまで。
    mmlを戻す。
ここまで。

＃＃字幕データ
●ドレミ字幕データ作成
    変数 字幕設定＝MML演奏データ["情報"]["字幕設定"]。
    F=関数(演奏データ) それは(演奏データ["トラック"]＝MML演奏データ["情報"]["字幕設定"]["歌詞"]["トラック"]) ここまで。
    変数 カラオケトラック＝FでMML演奏データ["データ"]を配列フィルタ。
    もし、（カラオケトラックの配列要素数）＝０ならば、戻る。
    MML演奏データ["字幕データ"]＝空配列。
    変数 字幕データ＝MML演奏データ["字幕データ"]。
    歌詞＝MML演奏データ["情報"]["歌詞"]を文字列分解。
    C=-1。
    それの要素数回:
        もし、歌詞[回数-1]＝改行ならば、:
            もし、字幕データ[C]["改行"]＝NULLならば、字幕データ[C]["改行"]＝0。
            字幕データ[C]["改行"]を１増やす。
        違えば、:
            C=C+1。
            字幕データ[C]＝空辞書。
            字幕データ[C]["文字"]＝歌詞[回数-1]。
    カラオケトラックを反復:
       もし、字幕データ[対象キー]＝NULLならば、抜ける。
       字幕データ[対象キー]["時間"]＝対象["開始時間"]。
    字幕設定["描画X"]＝字幕設定["歌詞"]["X"]。
    字幕設定["描画Y"]＝字幕設定["歌詞"]["Y"]。
ここまで。

＃＃設定辞書初期化
●MML変換設定辞書初期化
  MML変換設定辞書＝{
    "トラック":0,
    "テンポ":120,
    "調":空,
    "開始時間":[],
    "音色":[],
    "音階":[],
    "仮音階":[],
    "音量":[],
    "音符":[],
    "ゲート":[],
    "和音":[],
    "連符":[],
  }
  0のMML変換設定辞書トラック作成。
ここまで。

●(Noの)MML変換設定辞書トラック作成
    設定＝MML変換設定辞書
    設定["開始時間"][No]＝0。
    設定["音色"][No]＝0。
    設定["音階"][No]＝5。
    設定["仮音階"][No]＝0。
    設定["音量"][No]＝100。
    設定["音符"][No]＝0.25。//四分音符
    設定["ゲート"][No]＝80。
    設定["和音"][No]＝オフ。
    設定["連符"][No]＝オフ。
ここまで。


●(文字サイズと字幕文字数で)字幕X位置計算処理
    画面幅＝描画中キャンバスの「幅」をDOM属性取得。
    (画面幅/2)-(文字サイズ*字幕文字数/2)で戻る。
ここまで。

●(描画項目で)字幕Y位置計算処理
    もし、描画項目＝空ならば、0で戻る。
    前項目＝描画項目の配列ポップ。
    Y＝MML演奏データ["情報"]["字幕設定"][前項目]["Y"]。
    もし、前項目＝「コメント」ならば、:
        文字サイズ＝MML演奏データ["情報"]["字幕設定"]["コメント"]["文字サイズ"]。
        MML演奏データ["情報"]["コメント"]を改行で区切る。
        Y＝Y+((それの配列要素数)-2)*文字サイズ。
    Yで戻る。
ここまで。

●MML字幕描画設定作成
    MML演奏データ["情報"]["字幕設定"]＝空辞書。
    変数 MML字幕描画設定＝MML演奏データ["情報"]["字幕設定"]。
    変数 描画項目＝空配列。
    「曲名,作者,コメント,歌詞」を「,」で区切って反復。:
       キー＝対象。No＝対象キー。
       もし、MML演奏データ["情報"][キー]≠NULLならば、:
         MML字幕描画設定[キー]＝空辞書。
         キーで条件分岐:
           「曲名」ならば、:
               文字サイズ＝28。
               X＝文字サイズと(MML演奏データ["情報"]["曲名"]の文字数)で字幕X位置計算処理。
               MML字幕描画設定["曲名"]＝{
                 "X":X,
                 "Y":文字サイズ+2,
                 "文字サイズ":文字サイズ,
                 "文字色":黒色,
               }
           「作者」ならば、:
               文字サイズ＝20。
               X＝文字サイズと(MML演奏データ["情報"]["作者"]の文字数)で字幕X位置計算処理。
               Y＝描画項目で字幕Y位置計算処理。
               MML字幕描画設定["作者"]＝{
                 "X":X,
                 "Y":Y+文字サイズ+4,
                 "文字サイズ":文字サイズ,
                 "文字色":黒色,
               }
           「コメント」ならば、:
               文字サイズ＝14。
               Y＝描画項目で字幕Y位置計算処理。
               MML字幕描画設定["コメント"]＝{
                 "X":20,
                 "Y":Y+文字サイズ+8,
                 "文字サイズ":文字サイズ,
                 "文字色":黒色,
               }
           「歌詞」ならば、:
               文字サイズ＝20。
               Y＝描画項目で字幕Y位置計算処理。
               MML字幕描画設定["歌詞"]＝{
                 "X":20,
                 "Y":Y+文字サイズ+20,
                 "文字サイズ":文字サイズ,
                 "文字色":銀色,
                 "トラック":0,
                 "カラオケ文字色":赤色,
               }
               MML字幕描画設定["カウンタ"]＝0。
         描画項目にキーを配列追加。
ここまで。
#------------------------------------------------